#include "pattern.h"
#include <iostream>
#include <vector>
#include "gsl/gsl_rng.h"

// Open the file to write the pattern generated by me
void PATTERN::setupPatternFile()
{
	string str = "mkdir ";
	str.append(xstr(INDIR));
	system(str.c_str());                                    

	str = "./";
	str.append(xstr(INDIR));
	str.append("/");
	str.append(pattern_name);
	ofs.open(str.c_str(), ofstream::out | ofstream::trunc);   
	if(!ofs.is_open())                                                         
		std::cout << "Cannot open file!\n";
}

void PATTERN::initPattern()
{
	int i;

	no_pi_infile = inlist.size();

	for(i = 0; i < no_pi_infile; i++){
		ofs << "PI " << inlist[i]->GetName();
		if( i < no_pi_infile-1)
			ofs << " ";
	}
	ofs << endl;
}

void PATTERN::setPatterninput()
{
	int i;
	string str;

	str = "./";
	str.append(xstr(INDIR));
	str.append("/");
	str.append(pattern_name);
	patterninput.open(str.c_str(), ios::in);
	if(!patterninput){
		cout << "Unable to open pattern file" << endl;
		exit(-1);
	}

	for(i = 0; i < no_pi_infile; i++){
		patterninput >> str;
	}

}

void PATTERN::genRandomPattern(int pattern_number)
{
	setupPatternFile();
	initPattern();
	int i, j;	
	const gsl_rng_type *T;
	unsigned long int random;
	gsl_rng *r;
	
	gsl_rng_env_setup();

	T = gsl_rng_defualt;
	r = gsl_rng_alloc(T);
	for(i = 0; i < pattern_number; i++){
		for(j = 0; j < no_pi_infile; j++)
			random = gsl_rng_get(r);
			ofs << (random%2);
	}
	ofs << endl;
	gsl_rng_free(r);

	ofs.close();
}

void PATTERN::genRandomPatternUnknown(int pattern_number)
{
	setupPatternFile();
	//ofs << pattern_number;
}
